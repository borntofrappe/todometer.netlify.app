---
import Windows from "../images/windows.svg";
import Linux from "../images/linux.svg";
import Apple from "../images/apple.svg";

type File = {
  label: string;
  url: string;
};

type Platform = "windows" | "macOS" | "linux";

type Download = {
  platform: Platform;
  files: File[];
  Icon: ((_props: astroHTML.JSX.SVGAttributes) => any) & ImageMetadata;
};

const downloads: Download[] = [
  {
    platform: "windows",
    files: [
      {
        label: "exe",
        url: "/todometer_0.1.0_x64-setup.exe",
      },
      {
        label: "msi",
        url: "/todometer_0.1.0_x64_en-US.msi",
      },
    ],
    Icon: Windows,
  },
  {
    platform: "macOS",
    files: [
      {
        label: "intel",
        url: "/todometer_0.1.0_x64.dmg",
      },
      {
        label: "silicon",
        url: "/todometer_0.1.0_aarch64.dmg",
      },
    ],
    Icon: Apple,
  },
  {
    platform: "linux",
    files: [
      {
        label: "deb",
        url: "/todometer_0.1.0_amd64.deb",
      },
      {
        label: "rpm",
        url: "/todometer-0.1.0-1.x86_64.rpm",
      },
    ],
    Icon: Linux,
  },
];
---

<div id="download" class="region">
  <h2>Download</h2>
  <p>Latest version <span>0.1.0</span></p>

  <div class="platforms">
    {
      downloads.map(({ platform, files, Icon }) => (
        <div class="platform">
          <Icon width="64" height="64" />
          <ul>
            {files.map((file) => (
              <li>
                <a href={file.url} download>
                  {platform}
                  <small>{file.label}</small>
                </a>
              </li>
            ))}
          </ul>
        </div>
      ))
    }
  </div>
</div>

<style>
  .region {
    padding: var(--size-10) var(--size-3);
    max-inline-size: var(--size-content-3);
    margin-inline: auto;
  }

  .region {
    > * + * {
      margin-block-start: var(--size-3);
    }

    > ul {
      margin-block-start: var(--size-7);
    }

    > .platforms {
      margin-block-start: var(--size-7);
    }
  }

  .platforms {
    display: flex;
    flex-wrap: wrap;
    gap: var(--size-6) var(--size-3);
    > * {
      flex-grow: 1;
      flex-basis: calc((30rem - 100%) * 999);
    }
  }

  .platform {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--size-2);

    > svg {
      display: block;
      max-width: 64px;
      width: 100%;
      height: auto;
    }
  }

  h2 {
    text-align: center;
    font-size: var(--font-size-5);
  }

  p {
    text-align: center;
    color: var(--color-text-2);
  }

  ul {
    list-style: none;
  }

  .platform:has(a) svg {
    color: var(--color-text-2);
    transition-property: color, filter;
    transition-timing-function: var(--transition-timing-function);
    transition-duration: var(--transition-duration);
  }

  .platform:has(a:hover) svg {
    --color-drop-shadow: light-dark(
      oklch(from currentColor l c h / 0.25),
      oklch(from currentColor l c h / 0.6)
    );
    color: var(--color-text-1);
    filter: drop-shadow(0 0 10px var(--color-drop-shadow));
  }

  a {
    text-decoration: none;
    display: block;
    font-weight: 700;
    font-size: var(--font-size-2);
    color: var(--color-text-2);
    padding: var(--size-2) var(--size-3);
    border-radius: var(--radius-2);
    transition-property: color, background;
    transition-timing-function: var(--transition-timing-function);
    transition-duration: var(--transition-duration);

    > svg {
      width: 1.25em;
      height: 1.25em;
      translate: 0 0.25em;
    }

    & > small {
      color: var(--color-text-2);
      font-weight: 400;
      font-size: var(--font-size-1);

      &::before {
        content: "(";
      }

      &::after {
        content: ")";
      }
    }

    &:hover {
      color: var(--color-text-1);
      background: light-dark(
        oklch(from currentColor l c h / 0.05),
        oklch(from currentColor l c h / 0.1)
      );
    }
  }
</style>
